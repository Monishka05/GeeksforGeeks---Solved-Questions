
class solution
{
    static String LongestPalindromeSubString(String text)
    {
        if (text == null || text.length() == 0) {
            return "";
        }

        // Preprocess the input string to handle even-length palindromes
        StringBuilder processedText = new StringBuilder("#");
        for (char ch : text.toCharArray()) {
            processedText.append(ch).append('#');
        }

        int n = processedText.length();
        int[] palindromicLengths = new int[n];
        int center = 0, rightBoundary = 0;

        for (int i = 0; i < n; i++) {
            int mirror = 2 * center - i;

            if (i < rightBoundary) {
                palindromicLengths[i] = Math.min(rightBoundary - i, palindromicLengths[mirror]);
            }

            // Attempt to expand palindrome centered at i
            int left = i - (palindromicLengths[i] + 1);
            int right = i + (palindromicLengths[i] + 1);

            while (left >= 0 && right < n && processedText.charAt(left) == processedText.charAt(right)) {
                palindromicLengths[i]++;
                left--;
                right++;
            }

            // If palindrome centered at i expands past rightBoundary,
            // adjust center and rightBoundary accordingly
            if (i + palindromicLengths[i] > rightBoundary) {
                center = i;
                rightBoundary = i + palindromicLengths[i];
            }
        }

        // Find the maximum palindrome length and its center
        int maxLength = 0, maxCenter = 0;
        for (int i = 0; i < n; i++) {
            if (palindromicLengths[i] > maxLength) {
                maxLength = palindromicLengths[i];
                maxCenter = i;
            }
        }

        // Extract the longest palindrome substring from the processed string
        int start = (maxCenter - maxLength) / 2;
        int end = start + maxLength;
        return text.substring(start, end);
    }
}
